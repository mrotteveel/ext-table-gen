// SPDX-FileCopyrightText: 2023-2024 Mark Rotteveel
// SPDX-License-Identifier: Apache-2.0
import java.time.Year

import org.asciidoctor.gradle.jvm.AsciidoctorTask
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'application'
    id 'com.intershop.gradle.jaxb' version '7.0.0'
    id 'org.asciidoctor.jvm.convert' version '4.0.3'
}

group 'nl.lawinegevaar'
version '3.0-SNAPSHOT'

application {
    mainModule = 'nl.lawinegevaar.exttablegen'
    mainClass = 'nl.lawinegevaar.exttablegen.ExtTableGenMain'
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jaxb {
    javaGen {
        extTableGenConfig {
            schema = file('src/main/resources/ext-table-gen-1.0.xsd')
            packageName = 'nl.lawinegevaar.exttablegen.xmlconfig'
        }
    }
}

testing {
    suites {
        configureEach {
            useJUnitJupiter()
            dependencies {
                implementation.bundle(testLibs.bundles.junit)
                implementation(project('test-common'))
                implementation libs.opencsv
            }
            targets {
                configureEach {
                    testTask.configure {
                        testLogging {
                            events "passed", "skipped", "failed"
                        }
                        systemProperty 'file.encoding', 'UTF-8'
                    }
                }
            }
        }

        test {
            dependencies {
                implementation.bundle(testLibs.bundles.hamcrest)
            }
        }
        integrationTest(JvmTestSuite) {
            dependencies {
                implementation project()
                implementation testLibs.jaybird
                implementation.bundle(libs.bundles.jaxb)
                implementation libs.jspecify
            }

            targets {
                configureEach {
                    testTask.configure {
                        shouldRunAfter(test)
                        // Optional local environment config from integration-test-local.properties
                        def localIntegrationTestPropertiesFile = file('integration-test-local.properties')
                        if (localIntegrationTestPropertiesFile.exists()) {
                            def props = new Properties()
                            localIntegrationTestPropertiesFile.withInputStream {
                                props.load(it)
                            }
                            props.stringPropertyNames().each {
                                systemProperty it, props[it]
                            }
                        }
                    }
                }
            }
        }
    }
}

dependencies {
    implementation libs.picocli.core
    annotationProcessor libs.picocli.codegen
    implementation libs.opencsv
    implementation libs.bundles.jaxb
    implementation libs.commons.lang3
    implementation libs.jspecify

    testImplementation platform(testLibs.junit.bom)
    integrationTestImplementation platform(testLibs.junit.bom)
}

tasks.named('check') {
    dependsOn(testing.suites.integrationTest)
}

asciidoctorj {
    // asciidoctorj 3.0.0 doesn't seem to work with asciidoctor-gradle-plugin 4.0.3
    version = '2.5.13'
}

distributions {
    main {
        contents {
            from(asciidoctor) {
                exclude 'index.html'
                into 'docs'
            }
        }
    }
}

// only generate distribution zip, not distribution tar
tasks.withType(Tar).configureEach {
    enabled = false
}

tasks.named('asciidoctor', AsciidoctorTask).configure {
    attributes 'revnumber': false, 'etg-version': project.version
    executionMode = OUT_OF_PROCESS
    jvm {
        jvmArgs "--add-opens", "java.base/sun.nio.ch=ALL-UNNAMED", "--add-opens", "java.base/java.io=ALL-UNNAMED"
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.named('compileJava', JavaCompile).configure {
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

tasks.named('processResources', ProcessResources).configure {
    filter ReplaceTokens, tokens: [
            'VERSION': project.version
    ]
}

tasks.withType(Jar).configureEach {
    // General manifest info
    manifest {
        def buildYear = Year.now().toString()
        attributes(
                'Created-By': "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Bundle-License': 'Apache-2.0',
                'SPDX-License-Identifier': 'Apache-2.0',
                'SPDX-FileCopyrightText': "${buildYear == '2023' ? '2023' : "2023-$buildYear"} Mark Rotteveel"
        )
    }
}

tasks.named('jar', Jar).configure {
    // Info specific to main jar
    manifest {
        attributes(
                'Implementation-Title': 'ext-table-gen',
                'Implementation-Version': project.version
        )
    }
}